---
- name: Stop old service
  ansible.builtin.service:
    name: "{{ tomcat_migrate_service_name }}"
    state: stopped
  when:
    - tomcat_migrate_service_name | length > 0
    - ansible_facts.services[tomcat_migrate_service_name + '.service'] is defined

- name: Find conf in old tomcat path
  ansible.builtin.find:
    paths:
      - "{{ tomcat_previous_version_path }}/conf"
    file_type: any
  register: tomcat_migrate_conf

- name: Copy conf from old to new - no force
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ tomcat_install_path }}/conf/"
    remote_src: yes
    owner: root
    group: "{{ tomcat_user_group }}"
    mode: o-rwx
    force: no
  loop: "{{ tomcat_migrate_conf.files | map(attribute='path') | list }}"
  notify: Restart tomcat

- name: Copy conf from old to new - force
  ansible.builtin.copy:
    src: "{{ tomcat_previous_version_path }}/conf/{{ item }}"
    dest: "{{ tomcat_install_path }}/conf/"
    remote_src: yes
    owner: root
    group: "{{ tomcat_user_group }}"
    mode: o-rwx
    force: yes
  loop: "{{ tomcat_migrate_conf_force }}"
  notify: Restart tomcat

- name: Find lib in old tomcat path
  ansible.builtin.find:
    paths:
      - "{{ tomcat_previous_version_path }}/lib"
    file_type: any
  register: tomcat_migrate_lib

- name: Copy lib from old to new - no force
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ tomcat_install_path }}/lib/"
    remote_src: yes
    owner: root
    group: "{{ tomcat_user_group }}"
    mode: o-rwx
    force: no
  loop: "{{ tomcat_migrate_lib.files | map(attribute='path') | list }}"
  notify: Restart tomcat

- name: Find deployed webapps
  ansible.builtin.find:
    paths:
      - "{{ tomcat_previous_version_path }}/webapps"
    file_type: any
  register: tomcat_migrate_webapps

- name: Copy webapps from old to new
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ tomcat_install_path }}/webapps/"
    remote_src: yes
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_user_group }}"
    mode: o-rwx
  loop: "{{ tomcat_migrate_webapps.files | map(attribute='path') | list }}"

- name: Find extra folders in old
  ansible.builtin.find:
    paths: "{{ tomcat_previous_version_path }}"
    file_type: directory
  register: tomcat_migrate_folders_old

- name: Find extra folders in new
  ansible.builtin.find:
    paths: "{{ tomcat_install_path }}"
    file_type: directory
  register: tomcat_migrate_folders_new

- name: Set difference for extra config folders
  ansible.builtin.set_fact:
    tomcat_migrate_extra_folders: "{{ tomcat_migrate_folders_old.files | map(attribute='path') | map('regex_replace', '.*/', '') | list | difference(tomcat_migrate_folders_new.files | map(attribute='path') | map('regex_replace', '.*/', '') | list) }}"

- name: Copy extra folders from old to new
  ansible.builtin.copy:
    src: "{{ tomcat_previous_version_path + '/' + item }}"
    dest: "{{ tomcat_install_path }}/"
    remote_src: yes
    owner: root
    group: "{{ tomcat_user_group }}"
    mode: o-rwx
  loop: "{{ tomcat_migrate_extra_folders }}"

- name: Backup/Archive old path
  block:
    - name: Archive old path
      ansible.builtin.archive:
        path: "{{ tomcat_previous_version_path }}"
        dest: "{{ tomcat_previous_version_path }}.tgz"
        owner: root
        group: root
        mode: o-rwx

    - name: Remove old path
      ansible.builtin.file:
        path: "{{ tomcat_previous_version_path }}"
        state: absent
  when:
    - tomcat_migrate_archive_old_path
